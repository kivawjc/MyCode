
[###############成员变量和局部变量################]

成员变量:直接定义在类中,方法外,称之为字段.
局部变量: 除了成员变量其余都是局部变量
        |----方法内部
        |----方法的形参
        |----代码块

区别：
1> 变量初始值
成员变量默认[有初始值]
局部变量[没有初始值],需要初始化后才能使用
2> 变量的作用域
成员变量在[所定义的类]都有效
局部变量在[定义的位置]开始，到所在的花括号结束
3> 生命周期
成员变量: 存储在[堆]内存中,随[对象]销毁而销毁
局部变量: 存储在[栈]内存中，随[方法执行结束]而销毁
4> 位置
成员变量:定义在[类中]，方法外
局部变量:定义在[方法内]

[###############类和对象的关系################]

类(class)：对某一类事物的抽象描述
对象(object)：该类事物的实例
对象:将数据和数据的操作方式封装成一个整体

类的定义:
类是有相同特性的多个对象的抽象
1>成员变量表示状态
2> 成员方法表示行为

注意:
1>成员标量和方法都不能使用static修饰
2>new 一次会创建一个独立的对象
3>数组也是对象

类定义格式

public class 类名{
        
        修饰符 变量类型 变量名;

        //构造函数
        public 类名(){

        }

        修饰符 返回值 方法名([参数列表]){
              方法体
        }

}

[###############创建对象################]

创建类的对象，将对象的地址保存在对象名中
    类名   对象名=new 类构造器;

内存分析:
在方法区中加载cat.class,catDemo.class
在堆中创建cat对象
                    |---- cat    name:null,age=0    0x1234
在栈中创建一个main方法的栈帧
                   |---- main方法  
                                |---c:0x1234
在栈中创建一个say方法栈帧


[###################构造器#####################]

1>创建对象时会被调用
2>如果类中没有定义构造器，编译器会自动创建默认的缺省构造器,特点:无参数无方法体

格式:
[修饰符] 类名([形参]){
    方法体
}

作用:
1> 创建对象
2> 做初始化操作

注意:
1> 名字和类名相同;
2> 不能定义返回类型;
3> 定义构造器后，编译器不会自动生成无参构造器


[###################封装#####################]

1> 把对象的字段和方法存放在一个独立的模块中
2> 信息隐藏，尽可能隐藏对象的数据和功能的实现细节
3> 隐藏实现细节，提供访问方式
好处：
保证数据的安全性,防止调用者随意修改
提高组件的重用性


访问修饰符

                        类内部              同一包              子类                所有
private           U•ェ•*U
默认              U•ェ•*U            U•ェ•*U
protect          U•ェ•*U             U•ェ•*U          U•ェ•*U 
public            U•ェ•*U            U•ェ•*U          U•ェ•*U              U•ェ•*U



private 只能在本类中访问
默认:在同一包下能访问，不同包下不能访问
protect  能给不同包下的子类使用
public  所有情况都能使用

javabean规范
1> 类必须使用public修饰
2> 保证实现公共无参构造函数
3> 字段使用private修饰，并提供setter,getter访问方法










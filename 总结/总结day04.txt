************嵌套循环*******************

打印出
*
**
***
****
*****

for(int i=0;i<5;i++){
    for(int j=0;j<i;j++){
        System.out.println("*");
    }
}


打印9*9乘法表
for(int i=1;i<=9;i++){   //9行
    for(int j=1;j<=i;j++){
            System.out.print(i+"*"+j+"="+i*j+"\t");
    }
    System.out.println();
}


***************JVM 内存模型*****************

方法区:(放置固定不变的数据,都可访问)
线程共享的内存区域,存放字节码文件信息(类信息),常量，静态变量

java 虚拟机栈;
每一个方法执行时，都会开辟一个栈帧,用于存放当前方法的局部变量,
方法执行完毕之后，这一块内存区域自动销毁

堆: 存放对象实例以及数组
(所有线程共享,放置new出来的数据,堆中的东西不用时，不会立即销毁,
等待销毁)


public class Demo{
    
    public static void main(String[] args){
            int a=123;
            String str="decade";

            //操作d 的时候表示指向的区域
            Dog d=new Dog();
    }
}


方法区:
Demo.class   存储多个字节码文件信息


栈：  在方法执行完后销毁
创建一个main方法的栈帧
args:null
a:123
str:null
Dog d：0x1234   (对象的内存地址)

堆: 存放new 出来的对象 ,使用gc回收器，回收不用的对象
  ---> 地址:0x1234


数组:
 具有相同类型的多个变量值,有序组织的数据结构
 数组中的每一个值 : 数组元素
 数组中的索引: 记录元素存放的位置,从0开始,到元素个数-1;step=1

 数组的特点:
 1> 元素的类型都是相同类型
 2> 数组的长度固定不变

 数组的定义:
 数组元素的类型[] 数组名=new 数组元素的类型[数组元素个数];

数组的初始化
初始化就是在堆内存中给数组分配内存空间
1> 静态初始化(数据已经写死了):直接为每一个数组元素设置初始值,数组的长度有JVM决定
    初始化语法:
        数组元素的类型[] 数组名=new 数组元素的类型[]{元素1,元素2...};
       
       示例:
       //方式一
        int[] nums=new int[]{1,2,3};
        //方式二
        int [] nums={1,2,3};

        获取数组的长度
        nums.length();   

2> 数组的动态初始化:
只设置元素的个数,而数组的初始值有JVM自动分配

数据元素的默认值:
byte,short,int,long      0
float ,double               0.0
char                            空字符('\u0000')
boolean                       false
引用数据类型              null

语法:
 数组元素的类型[] 数组名=new 数组元素的类型[数组的长度];

        示例:
        int[] nums=new int[5];

数组的操作:
    
    int[] nums=new int[]{1,2,3,4,5};
    int size=nums.length();
    System.out.println("数组的长度:"+size);
    
    //获取数组的元素值
    int element1=nums[0];
    int element1=nums[1];
    int element1=nums[2];
    int element1=nums[3];

    //设置数组的元素值
    num[1]=20;


    //遍历数组
    for(int i=0;i<nums.length;i++){
        System.out.println(nums[i]);
    }

    //增强for-each 循环；底层也是使用for 和 index
    //
    
    



















 
